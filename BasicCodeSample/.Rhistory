write_rds(all.plots, file = "all.plots.RDS", compress = "gz")
getwd()
exp.plots <- read_rds(file = "Summer Work/all.plots.RDS")
.1 == .3 / 3
.3/3
a <- .3/3
a
a == .1
a == 0.1
seq(0, 1, by=.1) == .3
seq(0, 1, by=.1)
seq(0, 1, by=.1)[4]
seq(0, 1, by=.1)[4] == 0.3
unique(c(.3, .4 - .1, .5 - .2, .6 - .3, .7 - .4))
sum(unique(c(.3, .4 - .1, .5 - .2, .6 - .3, .7 - .4)))
unique(c(.3, .4 - .1, .5 - .2, .6 - .3, .7 - .4)) == 0.3
vec <- numeric(0)
for(i in 1:n) vec <- c(vec, i)
vec
n
my.df <- data.frame(a=character(0), b=numeric(0))
for(i in 1:n) {
my.df <- rbind(my.df, data.frame(a=sample(letters, 1),
b=runif(1)))
}
my.df
?’Memory-limits’
’Memory-limits’
Memory-limits
?`Memory-limits`
mean(2, -100, -4, 3, -230, 5)
= .3 / 3
.3 / 3
.1 == .3 / 3
type(0.1)
class(0.1)
class(.3 / 3)
typeof(.1)
typeof(.3 / 3)
digits = 10
.3 / 3
getS3method(’median’, ’default’)
getS3method(’median’)
getS3method("median")
getS3method("median", "default")
as.numeric(TRUE)
load("~/GitHub/CRISPR/DESeq2/.RData")
ex <- c(83.54274, 60.28530, 87.36702, 87.96918, 58.84550, 79.64685, 95.30643, 74.04038)
mean(100 - ex)
ex2 <- (98.55743, 94.29434, 97.14928, 95.28745, 89.08712, 91.63834, 99.90063, 86.51141)
ex2 <- c(98.55743, 94.29434, 97.14928, 95.28745, 89.08712, 91.63834, 99.90063, 86.51141)
mean(100 -ex2)
ex.list <- list(1:3, letters[1:3])
ex.list <- list(1:3, letters[1:3])
ex.list[1]
ex.list[-1]
library(tidyverse)
library(BiocManager)
library("DESeq2")
setwd("~/GitHub/CRISPR/DESeq2")
library("apeglm")
load("~/GitHub/CRISPR/DESeq2/.RData")
ex.d <- 1:3
names(ex.d) <- letters[1:3]
as.list(ex.d)
as.data.frame(as.list(ex.d))
count.submutations <- function(count.df){
submutation.counts.list <- apply(count.df, 1, individual.mutation.df)
partial.submutations <- bind_rows(submutation.counts.list)
# for some reason it's passing through as a chr matrix
count.names <- names(partial.submutations)[-length(names(partial.submutations))]
for(k in count.names){
partial.submutations[[k]] <- as.integer(partial.submutations[[k]])
}
#partial.submutations
# It's this na.rm = true that's messing things up.
# aggregate(.~ submutation ,data = partial.submutations, function(x){
#x <- replace_na(x, 0)
#sum(x, na.rm = TRUE)
#  })
summed.submutations <- partial.submutations[NULL,]
for(j in unique(partial.submutations$submutation)){
temp.df <- filter(partial.submutations, submutation == j) %>% select(-submutation)
# THE PROBLEM IS WITH THE APPLY FUNCTION
temp.summed.df <-  apply(temp.df, 2, function(count.col){
sum(count.col, na.rm = TRUE)
})
temp.summed.df <- as.data.frame(as.list(temp.summed.df))
temp.summed.df <- mutate(temp.summed.df, submutation = j)
summed.submutations <- rbind(summed.submutations, temp.summed.df)
}
return(summed.submutations)
}
ex.5 <- clean.mutation.df(raw.data.list$`B2x2-Haploid`$data[1:4,])
ex.6 <- count.submutations(ex.5)
# i think the problem has ot do with the fact that mutaiton.row is a list!
individual.mutation.df <- function(mutation.row){
mutation.name <- unlist(mutation.row[1])
mutation.counts <- unlist(mutation.row[-1])
count.names <- names(mutation.counts)
names(mutation.counts) <- NULL
submutations <- unlist(str_split(mutation.name, " "))
counts.matrix <- matrix(rep(mutation.counts, length(submutations)), nrow  = length(submutations), byrow = TRUE)
#final.df <- as.data.frame(cbind(matrix(submutations, ncol = 1), counts.matrix))
final.df <- as.data.frame(counts.matrix)
#return(final.df)
final.df <- mutate(final.df, submutations)
names(final.df) <- c(count.names, "submutation")
final.df
}
ex6 <- clean.mutation.df(raw.data.list$`B2x2-Haploid`$data)[4,]
ex7 <- individual.mutation.df(clean.mutation.df(raw.data.list$`B2x2-Haploid`$data)[4,])
count.submutations <- function(count.df){
submutation.counts.list <- apply(count.df, 1, individual.mutation.df)
partial.submutations <- bind_rows(submutation.counts.list)
# for some reason it's passing through as a chr matrix
count.names <- names(partial.submutations)[-length(names(partial.submutations))]
for(k in count.names){
partial.submutations[[k]] <- as.integer(partial.submutations[[k]])
}
#partial.submutations
# It's this na.rm = true that's messing things up.
# aggregate(.~ submutation ,data = partial.submutations, function(x){
#x <- replace_na(x, 0)
#sum(x, na.rm = TRUE)
#  })
summed.submutations <- partial.submutations[NULL,]
for(j in unique(partial.submutations$submutation)){
temp.df <- filter(partial.submutations, submutation == j) %>% select(-submutation)
# THE PROBLEM IS WITH THE APPLY FUNCTION
temp.summed.df <-  apply(temp.df, 2, function(count.col){
sum(count.col, na.rm = TRUE)
})
temp.summed.df <- as.data.frame(as.list(temp.summed.df))
temp.summed.df <- mutate(temp.summed.df, submutation = j)
summed.submutations <- rbind(summed.submutations, temp.summed.df)
}
return(summed.submutations)
}
ex.5 <- clean.mutation.df(raw.data.list$`B2x2-Haploid`$data[1:4,])
ex.6 <- count.submutations(ex.5)
#final.test <- count.submutations(clean.mutation.df(raw.data.list$`B2x2-Haploid`$data))
ex.6
final.test <- count.submutations(clean.mutation.df(raw.data.list$`B2x2-Haploid`$data))
final.test
dim(final.test)
count.submutations <- function(mutation.vec){
submutations <- unique(unlist(str_split(mutation.vec, " ")))
length(submutations)
}
lapply(raw.data.list, function(experiment){
count.submutations(experiment$data$`By mutation(s)`)
})
haploid.df <- count.submutations(clean.mutation.df(raw.data.list$`B2x2-Haploid`$data))
diploid.df <- count.submutations(clean.mutation.df(raw.data.list$`B2x2-Diploid`$data))
combine.cell.types(haploid.df, diploid.df, mutation.col = "submutation", count.names = count.names, clean.data = FALSE)
# must be a named list
reorder.list <- function(list, reorder.vector){
list.names <- names(list)
reordered.list.names <- names(list)[reorder.vector]
names(reordered.list.names) <- reordered.list.names
lapply(reordered.list.names, function(list.element){
list[[list.element]]
})
}
ex.list <- list(let = letters[1:3], num = 1:3, num2 = 4:6)
reorder.list(list = ex.list, reorder.vector = c(3, 1, 2))
count.submutations <- function(count.df){
submutation.counts.list <- apply(count.df, 1, individual.mutation.df)
partial.submutations <- bind_rows(submutation.counts.list)
# for some reason it's passing through as a chr matrix
count.names <- names(partial.submutations)[-length(names(partial.submutations))]
for(k in count.names){
partial.submutations[[k]] <- as.integer(partial.submutations[[k]])
}
#partial.submutations
# It's this na.rm = true that's messing things up.
# aggregate(.~ submutation ,data = partial.submutations, function(x){
#x <- replace_na(x, 0)
#sum(x, na.rm = TRUE)
#  })
summed.submutations <- partial.submutations[NULL,]
for(j in unique(partial.submutations$submutation)){
temp.df <- filter(partial.submutations, submutation == j) %>% select(-submutation)
# THE PROBLEM IS WITH THE APPLY FUNCTION
temp.summed.df <-  apply(temp.df, 2, function(count.col){
sum(count.col, na.rm = TRUE)
})
temp.summed.df <- as.data.frame(as.list(temp.summed.df))
temp.summed.df <- mutate(temp.summed.df, submutation = j)
summed.submutations <- rbind(summed.submutations, temp.summed.df)
}
# rearranging
n <- ncol(summed.submutations)
reorder.vector <- c(n, 1:(n-1))
summed.submutations <- as.data.frame(reorder.list(summed.submutations, reorder.vector))
return(summed.submutations)
}
ex.5 <- clean.mutation.df(raw.data.list$`B2x2-Haploid`$data[1:4,])
ex.6 <- count.submutations(ex.5)
final.test <- count.submutations(clean.mutation.df(raw.data.list$`B2x2-Haploid`$data))
final.test
haploid.df <- count.submutations(clean.mutation.df(raw.data.list$`B2x2-Haploid`$data))
diploid.df <- count.submutations(clean.mutation.df(raw.data.list$`B2x2-Diploid`$data))
combine.cell.types(haploid.df, diploid.df, mutation.col = "submutation", count.names = count.names, clean.data = FALSE)
gene.list
combined.mutation.list <- lapply(gene.list, function(gene){
raw.data.list.names <- names(raw.data.list)
gene.index <- str_detect(string = raw.data.list.names, pattern =  paste0(gene, "-") )
gene.index
haploid.index <- str_detect(string = raw.data.list.names, "Haploid")
diploid.index <- str_detect(string = raw.data.list.names, "Diploid")
final.haploid.index <- gene.index & haploid.index
final.diploid.index <- gene.index & diploid.index
final.haploid.name <- raw.data.list.names[final.haploid.index]
final.diploid.name <- raw.data.list.names[final.diploid.index]
raw.haploid.df <- raw.data.list[[final.haploid.name]]$data
raw.diploid.df <- raw.data.list[[final.diploid.name]]$data
combine.cell.types(raw.haploid.df = raw.haploid.df, raw.diploid.df, count.names = count.names, mutation.col = "By mutation(s)")
})
combined.mutation.list$B2x2
submutation.data.list <- lapply(raw.data.list, function(experiment){
count.submutations(clean.mutation.df(experiment$data))
})
submutation.data.list <- lapply(raw.data.list, function(experiment){
count.submutations(clean.mutation.df(experiment$data))
print("one down")
})
combined.submutation.list$B2x2
names(combined.submutation.list)
combined.submutation.list
combined.submutation.list
combined.submutation.list <- lapply(gene.list, function(gene){
submutation.data.list.names <- names(submutation.data.list)
gene.index <- str_detect(string = submutation.data.list.names, pattern =  paste0(gene, "-") )
return(gene.index)
haploid.index <- str_detect(string = submutation.data.list.names, "Haploid")
diploid.index <- str_detect(string = submutation.data.list.names, "Diploid")
final.haploid.index <- gene.index & haploid.index
final.diploid.index <- gene.index & diploid.index
final.haploid.name <- submutation.data.list.names[final.haploid.index]
final.diploid.name <- submutation.data.list.names[final.diploid.index]
sub.haploid.df <- submutation.data.list[[final.haploid.name]]$data
sub.diploid.df <- submutation.data.list[[final.diploid.name]]$data
combine.cell.types(sub.haploid.df, sub.diploid.df, mutation.col = "submutation", count.names = count.names, clean.data = FALSE)
})
combined.submutation.list
names(submutation.counts.list)
combined.submutation.list <- lapply(gene.list, function(gene){
submutation.data.list.names <- names(submutation.data.list)
gene.index <- str_detect(string = submutation.data.list.names, pattern =  paste0(gene, "-") )
haploid.index <- str_detect(string = submutation.data.list.names, "Haploid")
diploid.index <- str_detect(string = submutation.data.list.names, "Diploid")
final.haploid.index <- gene.index & haploid.index
final.diploid.index <- gene.index & diploid.index
final.haploid.name <- submutation.data.list.names[final.haploid.index]
final.diploid.name <- submutation.data.list.names[final.diploid.index]
sub.haploid.df <- submutation.data.list[[final.haploid.name]]$data
sub.diploid.df <- submutation.data.list[[final.diploid.name]]$data
combine.cell.types(sub.haploid.df, sub.diploid.df, mutation.col = "submutation", count.names = count.names, clean.data = FALSE)
})
combined.submutation.list <- lapply(gene.list, function(gene){
submutation.data.list.names <- names(submutation.data.list)
gene.index <- str_detect(string = submutation.data.list.names, pattern =  paste0(gene, "-") )
haploid.index <- str_detect(string = submutation.data.list.names, "Haploid")
diploid.index <- str_detect(string = submutation.data.list.names, "Diploid")
final.haploid.index <- gene.index & haploid.index
final.diploid.index <- gene.index & diploid.index
final.haploid.name <- submutation.data.list.names[final.haploid.index]
final.diploid.name <- submutation.data.list.names[final.diploid.index]
sub.haploid.df <- submutation.data.list[[final.haploid.name]][[data]]
#sub.diploid.df <- submutation.data.list[[final.diploid.name]]$data
#combine.cell.types(sub.haploid.df, sub.diploid.df, mutation.col = "submutation", count.names = count.names, clean.data = FALSE)
})
combined.submutation.list <- lapply(gene.list, function(gene){
submutation.data.list.names <- names(submutation.data.list)
gene.index <- str_detect(string = submutation.data.list.names, pattern =  paste0(gene, "-") )
haploid.index <- str_detect(string = submutation.data.list.names, "Haploid")
diploid.index <- str_detect(string = submutation.data.list.names, "Diploid")
final.haploid.index <- gene.index & haploid.index
final.diploid.index <- gene.index & diploid.index
final.haploid.name <- submutation.data.list.names[final.haploid.index]
final.diploid.name <- submutation.data.list.names[final.diploid.index]
sub.haploid.df <- submutation.data.list[[final.haploid.name]]
sub.diploid.df <- submutation.data.list[[final.diploid.name]]
combine.cell.types(sub.haploid.df, sub.diploid.df, mutation.col = "submutation", count.names = count.names, clean.data = FALSE)
})
combined.submutation.list <- lapply(gene.list, function(gene){
submutation.data.list.names <- names(submutation.data.list)
gene.index <- str_detect(string = submutation.data.list.names, pattern =  paste0(gene, "-") )
haploid.index <- str_detect(string = submutation.data.list.names, "Haploid")
diploid.index <- str_detect(string = submutation.data.list.names, "Diploid")
final.haploid.index <- gene.index & haploid.index
final.diploid.index <- gene.index & diploid.index
final.haploid.name <- submutation.data.list.names[final.haploid.index]
final.diploid.name <- submutation.data.list.names[final.diploid.index]
sub.haploid.df <- submutation.data.list[[final.haploid.name]]
sub.diploid.df <- submutation.data.list[[final.diploid.name]]
return(list(hap = sub.diploid.df, dip = sub.diploid.df))
#combine.cell.types(sub.haploid.df, sub.diploid.df, mutation.col = "submutation", count.names = count.names, clean.data = FALSE)
})
sub.haploid.df <- combined.submutation.list$B2x2$hap
sub.diploid.df <- combined.submutation.list$B2x2$dip
combine.cell.types(sub.haploid.df, sub.diploid.df, mutation.col = "submutation", count.names = count.names, clean.data = FALSE)
sub.haploid.df
sub.diploid.df
submutation.data.list
submutation.data.list <- lapply(raw.data.list, function(experiment){
print("starting next one")
count.submutations(clean.mutation.df(experiment$data))
})
combined.submutation.list <- lapply(gene.list, function(gene){
submutation.data.list.names <- names(submutation.data.list)
gene.index <- str_detect(string = submutation.data.list.names, pattern =  paste0(gene, "-") )
haploid.index <- str_detect(string = submutation.data.list.names, "Haploid")
diploid.index <- str_detect(string = submutation.data.list.names, "Diploid")
final.haploid.index <- gene.index & haploid.index
final.diploid.index <- gene.index & diploid.index
final.haploid.name <- submutation.data.list.names[final.haploid.index]
final.diploid.name <- submutation.data.list.names[final.diploid.index]
sub.haploid.df <- submutation.data.list[[final.haploid.name]]
sub.diploid.df <- submutation.data.list[[final.diploid.name]]
combine.cell.types(sub.haploid.df, sub.diploid.df, mutation.col = "submutation", count.names = count.names, clean.data = FALSE)
})
combined.submutation.list$B2x2
combined.submutation.list$B2x2
save.image("~/GitHub/CRISPR/DESeq2/.RData")
write_rds(combined.submutation.list, "combined.submutation.list.rds")
write_rds(combined.mutation.list, "combined.submutation.list.rds")
write_rds(combined.submutation.list, "combined.submutation.list.rds")
write_rds(combined.mutation.list, "combined.mutation.list.rds")
load("~/GitHub/CRISPR/DESeq2/.RData")
library(tidyverse)
library(BiocManager)
library("DESeq2")
library("apeglm")
dds <- mutation.lfc.drug.list$B2x2$dds
res <- mutation.lfc.drug.list$B2x2$resLFC$treatment_O1_vs_Mock
plotCounts(dds, gene=which.min(res$padj), intgroup="cell.type")
BiocManager::install("IHW")
BiocManager::install("IHW")
ibrary("IHW")
library("IHW")
resIHW <- results(dds, filterFun=ihw)
summary(resIHW)
sum(resIHW$padj < 0.1, na.rm=TRUE)
metadata(resIHW)$ihwResult
save.image("~/GitHub/CRISPR/DESeq2/.RData")
setwd("..")
getwd()
setwd("../..")
getwd()
setwd("C:/Users/Wayne Monical/OneDrive/Documents/Resume Folder/Code Sample/W Monical Code Sample")
library(dplyr)
# data load
stock_rawdata <- read.csv("stock_data.csv", header = TRUE)
# removing unnecessary columns, with pacakage dplyr
stock <- select(stock_rawdata, date, TICKER, PRC)
stock <- na.omit(stock)
# Removing duplicates.
stock <- stock[!duplicated(stock), ]
library(dplyr)
# data load
stock_rawdata <- read.csv("stock_data.csv", header = TRUE)
# removing unnecessary columns, with pacakage dplyr
stock <- select(stock_rawdata, date, TICKER, PRC)
stock <- na.omit(stock)
# Removing duplicates.
stock <- stock[!duplicated(stock), ]
tickertable <- table(stock$TICKER)
# boolean of the date stocks that I want to include
tickertable <- table(stock$TICKER)
stock_boolean <- tickertable == 1342
# boolean mask to include only these stocks
ticker_include <- tickertable[stock_boolean]
# peeling the names of the stocks with 1342 entries off the table
# stock_included has the tickers of all these stocks
stock_included <- names(ticker_include)
## Plotting the occurences of each ticker
# base R
plot(table(stock$TICKER),
main = "Counts of Tickers",
ylab = "Count",
col = factor(!stock_boolean))
## Comparing the dates of the included stocks with exactly 1342 entries in the dataframe.
# simple filter for tickers that occur 1342 times
stock_new <- filter(stock, TICKER %in% stock_included)
# checking that each of the 1342 corresponds to exactly 1 date.
length(unique(stock_new$date))
# turning the numerical date vector to a more friendly format.
# note: we have to specify the format that the date vector is in, i.e. '%Y%m%d'
dateform <- as.Date(as.character(stock$date), format = '%Y%m%d')
# adding the corrected dates to the data frame
stock_new <- mutate(stock, dateform =  dateform )
# specify first day
start <- min(stock_new$dateform)
# to make stock data work in days, add a day so that no entry is zero
date_num <- as.numeric((as.POSIXct(stock_new$dateform) + 24*60^2) - as.POSIXct(start))
# adding date_num to stock_new
stock_new <- mutate(stock_new, date_num = date_num)
# filtering for CMT stock
cmt <- filter(stock_new, TICKER == "CMT")
# plotting corrected and uncorrected side by side
par(mfrow = c(1, 2))
plot(cmt$PRC, pch = 20, main = "CMT Stock Price, Uncorrected",
xlab = "Date Index", ylab = "Raw Data Price",
col = factor(cmt$PRC < 0), cex = 0.8)
plot(abs(cmt$PRC), type = 'l', main = "CMT Stock Price, Corrected",
xlab = "Date Index" , ylab = "Corrected Price")
# Fixing the data
stock_new <- mutate(stock_new, PRC = abs(stock_new$PRC))
# Dropping other date formats
stock_new <- select(stock_new, -date, -dateform)
# internal function
# returns matrix descrbing closet k neighbors
closest.k <- function(value, vec, k = 1){
# convience value
temp_n <- length(vec)
# matrix whose columns are an index of vector place, the vector,
# and how close each entry is to the target
temp_mat <- matrix(c(1:temp_n, vec, abs(vec - value)), nrow = temp_n)
temp_mat <- temp_mat[order(temp_mat[,3]),]
effective_k <- max(k, 3)
answer <- temp_mat[1:effective_k, ]
if(is.vector(answer)){
stop("closest.k is trying to return a vector")
}
if(! is.matrix(answer)){
stop("closest.k is trying to return not a matrix")
}
return(answer)
}
# predicts the response at value, from data
knn.predict <- function(value, response, data, k = 1){
mat_closest <- closest.k(k = k, vec = data, value = value)
temp_index <- mat_closest[1:k,1]
closest_response <- response[temp_index]
return(sum(closest_response) / k)
}
# apply wrapper
knn.apply <- function(sequence, response, data, k){
answer <- sapply(X = sequence, FUN = function(x){knn.predict(value = x, response = response, data = data , k = k)})
return(answer)
}
library(ggplot2)
# interesting stocks
ticker_subset <- c("COF", "FLS",  "AET", "ROP", "PEG")
stock_subset <- filter(stock_new, TICKER %in% ticker_subset)
stock_subset <- mutate(stock_subset, data_type = "Original Data")
# initial plot
ggplot(data = stock_subset, aes(x = date_num,  y = PRC)) + geom_point(aes(col = TICKER), size = 0.5) +
ggtitle("Subset of Stocks") +
labs(x = "Date Index", y = "Price")
# splitting into training and test
sample_index <- sample(1:max(stock_subset$date_num), size = 35, replace = FALSE)
stock_train <- filter(stock_subset, date_num %in% sample_index)
stock_test <- filter(stock_subset, !date_num %in% sample_index)
# useful constants
date_sequence <- seq(0, 2000, 1)
k_star <- 10
# work on 1 stock first
train_FLS <- filter(stock_train, TICKER == "FLS")
# applying kNN to FLS on date index
predict_FLS <- knn.apply(sequence = date_sequence, response = train_FLS$PRC, data = train_FLS$date_num, k = k_star)
df_predict_FLS <- data.frame(TICKER = "FLS", PRC = predict_FLS, date_num = date_sequence, data_type = "Prediction")
# in order to use ggplot, these need to fit together
train_FLS <- rbind(train_FLS, df_predict_FLS)
# plotting the original data and the kNN prediction
# base R
plot(train_FLS$date_num[train_FLS$data_type == "Original Data"], train_FLS$PRC[train_FLS$data_type == "Original Data"],
main = "kNN = 10 Prediction of FLS Stock Price", xlab = "Date Index",
ylab = "Prediction") +
points(date_sequence, predict_FLS, type = "l", col = "red")
# the same exact plot in ggplot
ggplot(data = train_FLS, ) +
geom_point(data = subset(train_FLS, data_type == "Original Data"),
aes(x = date_num, y = PRC, color = TICKER, shape = data_type)) +
geom_line(data = subset(train_FLS, data_type == "Prediction"),
aes(x = date_num, y = PRC, color = TICKER)) +
ggtitle(label = "kNN = 10 Prediction of FLS Stock Price") +
labs(x = "Date Index", y = "Prediction", col = "Stock Name", shape = "")
# predicing the other stock prices from kNN
for(g in ticker_subset){
df_g <- filter(stock_train, TICKER == g)
predict_g <- knn.apply(sequence = date_sequence, response = df_g$PRC,
data = df_g$date_num, k = k_star)
df_predict_g <- data.frame(TICKER = g, PRC = predict_g,
date_num = date_sequence, data_type = "Prediction")
stock_train <- rbind(stock_train, df_predict_g)
}
# in gg plot, we can add the other data too
ggplot(data = stock_train) +
geom_point(data = subset(stock_train, data_type == "Original Data"),
aes(x = date_num, y = PRC, color = TICKER, shape = data_type)) +
geom_line(data = subset(stock_train, data_type == "Prediction"),
aes(x = date_num, y = PRC, color = TICKER)) +
ggtitle(label = paste0("kNN = ", k_star," Prediction of Stock Prices")) +
labs(x = "Date Index", y = "Prediction", col = "Stock Name", shape = "")
## Computing expected error
empirical_error <- matrix(rep(0, 10), nrow = 2, dimnames = list(c("test", "training"), ticker_subset))
# the first step in joining the predictions to the original matrix
stock_train_predict <- filter(stock_train, data_type == "Prediction")
stock_train_predict <- mutate(stock_train_predict,
Prediction = stock_train_predict$PRC) %>% select(-PRC, -data_type)
# inner join, since the matrix should be full
stock_merge <- inner_join(stock_subset, stock_train_predict, by = c("TICKER", "date_num"))
stock_merge <- mutate(stock_merge, Error = abs(stock_merge$Prediction - stock_merge$PRC))
stock_merge_train <- filter(stock_merge, date_num %in% sample_index)
stock_merge_test <- filter(stock_merge, !date_num %in% sample_index)
empirical_error[1,] <- aggregate(stock_merge_train[,"Error"], list(stock_merge_train$TICKER), mean)$x
empirical_error[2,] <- aggregate(stock_merge_test[,"Error"], list(stock_merge_test$TICKER), mean)$x
empirical_error
