setwd("~/GitHub/waynemonical.github.io/PCAproject")
setwd("~/GitHub/waynemonical.github.io/PCAproject/expfolder")
source(expscript.R)
source("expscript.R")
print(a)
setwd("~/GitHub/waynemonical.github.io/PCAproject")
print(a)
source(expscript.R)
source("expscript.R")
print(a)
library(crayon)
cat(blue("Hello", "world!\n"))
source("core.functions.R")
library(crayon)
cat(green("Hello", "world!\n"))
source("core.functions.R")
source("core.functions.R")
cat(crayon::green("core.functions.R file successfully sourced\n"))
source("core.functions.R")
source("core.functions.R")
library(readr)
library(tidyverse)
library(scatterplot3d)
library(kernlab)
# info load
experiment.information <- read.csv("experiment.information.csv")
all.reads <- read_csv("all.crispresso.clean.csv")
all.reads <- all.reads[,-1]
replace.list <- as.list(rep(0, ncol(all.reads)))
names(replace.list) <- names(all.reads)
# replace NA's with zeros
all.reads <- replace_na(data = all.reads, replace = replace.list)
# WT will only be in all.reads
# p4 and p5 will only be in the all.reads, all.hap, and all.dip
cell.type <- experiment.information$Cell.Type
treatment.type <- experiment.information$trtmnt.type
# percent.boolean takes care of the NA's                                                                     # drops WT's             # drops p4's and p5's
percent.boolean <- experiment.information$data.type == "%" & !is.na(experiment.information$data.type)        & cell.type != "WT"      & treatment.type != "p4" & treatment.type != "p5"
all.boolean <- percent.boolean
all.hap <- cell.type == "H" & percent.boolean
all.dip <- cell.type == "D" & percent.boolean
hap.nira <- cell.type == "H" & percent.boolean & treatment.type == "Nira"
hap.ola <- cell.type == "H" & percent.boolean & treatment.type == "Ola"
hap.gy <- cell.type == "H" & percent.boolean & treatment.type == "Gy"
dip.nira <- cell.type == "D" & percent.boolean & treatment.type == "Nira"
dip.ola <- cell.type == "D" & percent.boolean & treatment.type == "Ola"
dip.gy <- cell.type == "D" & percent.boolean & treatment.type == "Gy"
boolean.list <- list(all.boolean = all.boolean, all.hap = all.hap, all.dip = all.dip, hap.nira = hap.nira, hap.ola = hap.ola, hap.gy = hap.gy, dip.nira = dip.nira, dip.ola = dip.ola, dip.gy = dip.gy)
# boolean.vector is logical as to whether the ith of n data points should be included in the analysis
begin.object <- function(boolean.vector, y.data, x.set){
list(y.data = y.data[,boolean.vector], x.set = x.set[boolean.vector,])
}
conduct.linear.pca <- function(list.object){
# checks
if(prod(names(list.object) != c("y.data", "x.set"))){
stop("incorrect list.object. Use begin.object function")
}
linear.pca <- prcomp(t(list.object$y.data))
c(list.object, linear.pca = list(linear.pca))
}
# testing
first.obj <- begin.object(boolean.vector = all.boolean, y.data = all.reads, x.set = experiment.information)
first.obj.pca <- conduct.linear.pca(list.object = first.obj)
all.obj <- lapply(boolean.list, FUN = function(x){begin.object(boolean.vector = x, y.data = all.reads, x.set = experiment.information)})
# it literally works
all.obj.lpca <- lapply(all.obj, FUN = function(x){conduct.linear.pca(x)})
# lets try to use the screeplot function
# none of these screeplots are good except the one for all the data
lapply(all.obj.lpca, FUN = function(x){screeplot(x$linear.pca)})
all.obj.reg2 <- lapply(all.obj.lpca, FUN = function(z){conduct.regression2(z, pcas = 1:4)})
lapply(all.obj.reg2$all.hap$lpca.regressions, FUN = summary)
# info load
experiment.information <- read.csv("experiment.information.csv")
# BIG CHANGE
# We're losing regression strength from the fact that mock and unt are their own catergories
experiment.information$trtmnt.type[experiment.information$trtmnt.type == "unt"] <- "Gy"
experiment.information$trtmnt.type[experiment.information$trtmnt.type == "mock"] <- "Ola"
all.reads <- read_csv("all.crispresso.clean.csv")
all.reads <- all.reads[,-1]
replace.list <- as.list(rep(0, ncol(all.reads)))
names(replace.list) <- names(all.reads)
# replace NA's with zeros
all.reads <- replace_na(data = all.reads, replace = replace.list)
# WT will only be in all.reads
# p4 and p5 will only be in the all.reads, all.hap, and all.dip
cell.type <- experiment.information$Cell.Type
treatment.type <- experiment.information$trtmnt.type
# percent.boolean takes care of the NA's                                                                     # drops WT's             # drops p4's and p5's
percent.boolean <- experiment.information$data.type == "%" & !is.na(experiment.information$data.type)        & cell.type != "WT"      & treatment.type != "p4" & treatment.type != "p5"
all.boolean <- percent.boolean
all.hap <- cell.type == "H" & percent.boolean
all.dip <- cell.type == "D" & percent.boolean
hap.nira <- cell.type == "H" & percent.boolean & treatment.type == "Nira"
hap.ola <- cell.type == "H" & percent.boolean & treatment.type == "Ola"
hap.gy <- cell.type == "H" & percent.boolean & treatment.type == "Gy"
dip.nira <- cell.type == "D" & percent.boolean & treatment.type == "Nira"
dip.ola <- cell.type == "D" & percent.boolean & treatment.type == "Ola"
dip.gy <- cell.type == "D" & percent.boolean & treatment.type == "Gy"
boolean.list <- list(all.boolean = all.boolean, all.hap = all.hap, all.dip = all.dip, hap.nira = hap.nira, hap.ola = hap.ola, hap.gy = hap.gy, dip.nira = dip.nira, dip.ola = dip.ola, dip.gy = dip.gy)
all.obj <- lapply(boolean.list, FUN = function(x){begin.object(boolean.vector = x, y.data = all.reads, x.set = experiment.information)})
# it literally works
all.obj.lpca <- lapply(all.obj, FUN = function(x){conduct.linear.pca(x)})
all.obj.reg2 <- lapply(all.obj.lpca, FUN = function(z){conduct.regression2(z, pcas = 1:4)})
lapply(all.obj.reg2$all.hap$lpca.regressions, FUN = summary)
# give the
analysis <- all.obj.reg2$all.dip
principle.components.used <- create.numlist(1:2)
# let these doe the work
observations <- analysis$y.data
principle.comp.matrix <- analysis$linear.pca$rotation[,unlist(principle.components.used)]
fitted.in.pca <- lapply(names(principle.components.used), FUN = function(a){analysis$lpca.regressions[[a]]})
names(fitted.in.pca) <- principle.components.used
#### Predicted Data
####
fitted.in.pca.matrix <- sapply(fitted.in.pca, FUN = function(b){b$fitted.values})
fitted.percents <- principle.comp.matrix %*% t(fitted.in.pca.matrix)
# adding mutation columns!
fitted.percents <- mutate(as.data.frame(fitted.percents), mutation = all.reads$`By mutation(s)`)
# unstacking
fitted.percents.unstack <- pivot_longer(data = fitted.percents, cols = -mutation, names_to = "sample", values_to = "percent")
fitted.percents.unstack <- mutate(fitted.percents.unstack, obs.or.predict = "Prediction")
####  Observation Data
####
observations <- mutate(observations, mutation = all.reads$`By mutation(s)`)
observed.percents.unstack <- pivot_longer(data = observations, cols = -mutation, names_to = "sample", values_to = "percent")
observed.percents.unstack <- mutate(observed.percents.unstack, obs.or.predict = "Observation")
#### Row Binding
####
final.percents <- rbind(fitted.percents.unstack, observed.percents.unstack)
# adding experiment information
rownames(experiment.information) <- experiment.information$entire
final.percents <- cbind(final.percents, experiment.information[ final.percents$sample,])
final.percents
graphic.pipeline(analysis = all.obj.reg2$all.dip, principle.components.used = 1:2)
final.percents
```{r, echo=FALSE, message = FALSE, warning=FALSE}
```{r, echo=FALSE, message = FALSE, warning = FALSE}
```{r, echo = FALSE, message = FALSE, warning = FALSE}
```{r}
library(readr)
library(tidyverse)
library(scatterplot3d)
library(kernlab)
```{r, echo = FALSE, message = FALSE, warning = FALSE}
```{r, echo = FALSE}
```{r ,message = FALSE, warning = FALSE}
```{r}
{r}
library(readr)
library(tidyverse)
library(scatterplot3d)
library(kernlab)
#source('path')
source("data.load.and.clean.R")
experiment.information
# info load
experiment.information <- read.csv("experiment.information.csv")
all.reads <- read_csv("all.crispresso.clean.csv")
?read_csv
