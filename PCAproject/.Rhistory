if(linear.pca){
# I'm putting this chunk on hold
# Has linear pca been conducted? If not, conduct it
#if(! linear.pca %in% names(list.object)){
# list.object <- conduct.linear.pca(list.object = list.object)
#}
y.set <- list.object$linear.pca$x[,1]
design.matrix <- data.frame(y.set = y.set, list.object$x.set)
lpca.regression <- lm(formula = regression.formula, data = design.matrix)
if(!anova){
return(c(list.object, lpca.regression = list(lpca.regression)))
}
}
}
conduct.regression2 <- function(list.object, pcas = 1:3){
# lm needs a formula
regression.formula <- (formula.function(list.object))[[1]]
num.list <- create.numlist(pcas)
lpca.regressions <- lapply(num.list, FUN = function(y){apply.regression(y.set = list.object$linear.pca$x[,y],
x.set = list.object$x.set,
formula = regression.formula
)})
return(c(list.object, lpca.regressions = list(lpca.regressions)))
}
apply.regression <- function(y.set, x.set, formula){
design.matrix <- data.frame(y.set = y.set, x.set)
lm(formula = formula, data = design.matrix)
}
create.numlist <- function(integer.vector){
names(integer.vector) <-  integer.vector
as.list(integer.vector)
}
# conduct.regression depends on formula.function
formula.function <- function(list.object){
cell.type.include <- length(unique(list.object$x.set$Cell.Type)) > 1
treatment.type.include <- length(unique(list.object$x.set$trtmnt.type)) > 1
possible.formulas[cell.type.include  + treatment.type.include + 1]
}
# formula.function depends on this constant
possible.formulas <- c(y.set ~ trtmnt.amnt, y.set ~ trtmnt.type + trtmnt.amnt, y.set ~ Cell.Type + trtmnt.type + trtmnt.amnt)
# test. It works!
first.obj.reg2 <- conduct.regression2(first.obj.pca)
summary(first.obj.reg2$lpca.regressions$`1`)
all.obj.reg2$dip.ola$lpca.regressions$`1`
all.obj.reg2 <- lapply(all.obj.lpca, FUN = function(z){conduct.regression2(z, pcas = 1:4)})
library(tidyverse)
is.scaled <- FALSE
fitted.val1 <- all.obj.reg2$all.hap$lpca.regressions$`1`$model$y.set
first.pc <- (all.obj.reg2$all.hap$linear.pca$rotation[,1])
all.obj.reg2$all.hap$linear.pca$rotation[,1]
rebuild1 <- (fitted.val1) %*%  t(first.pc)
hist(apply(rebuild1, 1, sum))
#rebuild <- all.obj.reg2$all.hap$linear.pca$x %*% t(all.obj.reg2$all.hap$linear.pca$rotation)
#dim(rebuild)
#sum(rebuild[3,])
# ok for some reason it sums to 100 now
#first.try <- first.pc %*% t(fitted.val1)
# change these
analysis <- all.obj.reg2$all.hap
principle.components.used <- create.numlist(1:2)
# let these doe the work
observations <- analysis$y.data
principle.comp.matrix <- analysis$linear.pca$rotation[,unlist(principle.components.used)]
fitted.in.pca <- lapply(names(principle.components.used), FUN = function(a){analysis$lpca.regressions[[a]]})
names(fitted.in.pca) <- principle.components.used
#### Predicted Data
####
fitted.in.pca.matrix <- sapply(fitted.in.pca, FUN = function(b){b$fitted.values})
fitted.percents <- principle.comp.matrix %*% t(fitted.in.pca.matrix)
# adding mutation columns!
fitted.percents <- mutate(as.data.frame(fitted.percents), mutation = all.reads$`By mutation(s)`)
# unstacking
fitted.percents.unstack <- pivot_longer(data = fitted.percents, cols = -mutation, names_to = "sample", values_to = "percent")
fitted.percents.unstack <- mutate(fitted.percents.unstack, obs.or.predict = "Prediction")
####  Observation Data
####
observations <- mutate(observations, mutation = all.reads$`By mutation(s)`)
observed.percents.unstack <- pivot_longer(data = observations, cols = -mutation, names_to = "sample", values_to = "percent")
observed.percents.unstack <- mutate(observed.percents.unstack, obs.or.predict = "Observation")
#### Row Binding
####
final.percents <- rbind(fitted.percents.unstack, observed.percents.unstack)
# adding experiment information
rownames(experiment.information) <- experiment.information$entire
final.percents <- cbind(final.percents, experiment.information[ final.percents$sample,])
final.percents
all.percent.sum <- apply(all.reads[,all.hap], 1, sum)
mutation.subsample <- all.reads$`By mutation(s)`[order(all.percent.sum, decreasing = TRUE)][1:5]
subsample <- filter(final.percents, (trtmnt.type == "Ola" | trtmnt.type == "mock") & mutation %in% mutation.subsample & !percent < 0.1)
ggplot(data = subsample, aes(x = trtmnt.amnt, y = percent, color = mutation)) +
geom_point(data = subset(subsample, obs.or.predict == "Observation"), aes(x = trtmnt.amnt, y = percent, color = mutation))  +
geom_line(data = subset(subsample, obs.or.predict == "Prediction"), aes(x = trtmnt.amnt, y = percent, color = mutation))  +
theme(legend.position = "none")+
labs(title = "Principle Component Analysis on Olaparib Haploid Experiments", x = "Olaparib Concentration", y = "Allele Percentage")
subsample <- filter(final.percents, (trtmnt.type == "Nira" | trtmnt.type == "mock") & mutation %in% mutation.subsample & !percent < 0.1)
ggplot(data = subsample, aes(x = trtmnt.amnt, y = percent, color = mutation)) +
geom_point(data = subset(subsample, obs.or.predict == "Observation"), aes(x = trtmnt.amnt, y = percent, color = mutation))  +
geom_line(data = subset(subsample, obs.or.predict == "Prediction"), aes(x = trtmnt.amnt, y = percent, color = mutation))  +
theme(legend.position = "none")+
labs(title = "Principle Component Analysis on Niraparib Haploid Experiments", x = "Niraparib Concentration", y = "Allele Percentage")
subsample <- filter(final.percents, (trtmnt.type == "Gy" | trtmnt.type == "unt") & mutation %in% mutation.subsample & !percent < 0.1)
ggplot(data = subsample, aes(x = trtmnt.amnt, y = percent, color = mutation)) +
geom_point(data = subset(subsample, obs.or.predict == "Observation"), aes(x = trtmnt.amnt, y = percent, color = mutation))  +
geom_line(data = subset(subsample, obs.or.predict == "Prediction"), aes(x = trtmnt.amnt, y = percent, color = mutation))  +
#theme(legend.position = "none")+
labs(title = "Principle Component Analysis on Irradiated Haploid Experiments", x = "Radiation Amount", y = "Allele Percentage")
all.percent.sum <- apply(all.reads[,all.hap], 1, sum)
mutation.subsample <- all.reads$`By mutation(s)`[order(all.percent.sum, decreasing = TRUE)][c(1,3, 4)]
subsample <- filter(final.percents, (trtmnt.type == "Ola" | trtmnt.type == "mock") & mutation %in% mutation.subsample & !percent < 1)
ggplot(data = subsample, aes(x = trtmnt.amnt, y = percent, color = mutation)) +
geom_point(data = subset(subsample, obs.or.predict == "Observation"), aes(x = trtmnt.amnt, y = percent, color = mutation))  +
geom_line(data = subset(subsample, obs.or.predict == "Prediction"), aes(x = trtmnt.amnt, y = percent, color = mutation, shape = obs.or.predict))  +
labs(title = "Regressing Three Mutations", x = "Olaparib Concentration", y = "Allele Percentage")
all.percent.sum <- apply(all.reads[,all.hap], 1, sum)
mutation.subsample <- all.reads$`By mutation(s)`[order(all.percent.sum, decreasing = TRUE)][1:10]
subsample <- filter(final.percents, trtmnt.type == "Nira" & mutation %in% mutation.subsample & !percent < 0.01)
ggplot(data = subsample, aes(x = trtmnt.amnt, y = percent, color = mutation)) +
geom_point(data = subset(subsample, obs.or.predict == "Observation"), aes(x = trtmnt.amnt, y = percent, color = mutation, shape = obs.or.predict))  +
geom_line(data = subset(subsample, obs.or.predict == "Prediction"), aes(x = trtmnt.amnt, y = percent, color = mutation, shape = obs.or.predict))  +
theme(legend.position = "none")
all.percent.sum <- apply(all.reads[,all.hap], 1, sum)
mutation.subsample <- all.reads$`By mutation(s)`[order(all.percent.sum, decreasing = TRUE)][1]
subsample <- filter(final.percents, trtmnt.type == "Nira" & mutation %in% mutation.subsample & !percent < 0.01)
ggplot(data = subsample, aes(x = trtmnt.amnt, y = percent, color = mutation)) +
geom_point(data = subset(subsample, obs.or.predict == "Observation"), aes(x = trtmnt.amnt, y = percent, color = mutation))  +
geom_line(data = subset(subsample, obs.or.predict == "Prediction"), aes(x = trtmnt.amnt, y = percent, color = mutation, shape = obs.or.predict))
all.percent.sum <- apply(all.reads[,all.dip], 1, sum)
mutation.subsample <- all.reads$`By mutation(s)`[order(all.percent.sum, decreasing = TRUE)][1:10]
subsample <- filter(final.percents, trtmnt.type == "Ola" & mutation %in% mutation.subsample & !percent < 0.01)
ggplot(data = subsample, aes(x = trtmnt.amnt, y = percent, color = mutation)) +
geom_point(data = subset(subsample, obs.or.predict == "Observation"), aes(x = trtmnt.amnt, y = percent, color = mutation, shape = obs.or.predict))  +
geom_line(data = subset(subsample, obs.or.predict == "Prediction"), aes(x = trtmnt.amnt, y = percent, color = mutation, shape = obs.or.predict))  +
theme(legend.position = "none")
top.vec.mut <- all.reads$`By mutation(s)`[order(all.percent.sum, decreasing = TRUE)][1:50]
top.mutations <- as.list(top.vec.mut)
names(top.mutations) <- top.vec.mut
first.50.regressions <- lapply(top.mutations, function(x){
temp.df <- filter(final.percents, obs.or.predict == "Observation" & mutation == x)
if(x %in% top.vec.mut[1:10]){
temp.df <- filter(temp.df, percent > 1)
}
lm(percent ~ trtmnt.amnt + trtmnt.type, data = temp.df)
})
first.50.df <- lapply(first.50.regressions, function(x){
temp.df <- x$model %>% select( -percent) %>% mutate(Cell.Type = "H")
rownames(temp.df) <- NULL
cbind(percent = x$fitted.values, temp.df)
})
top.vec.mut <- all.reads$`By mutation(s)`[order(all.percent.sum, decreasing = TRUE)][1:50]
top.mutations <- as.list(top.vec.mut)
names(top.mutations) <- top.vec.mut
first.50.regressions <- lapply(top.mutations, function(x){
temp.df <- filter(final.percents, obs.or.predict == "Observation" & mutation == x)
if(x %in% top.vec.mut[1:10]){
temp.df <- filter(temp.df, percent > 1)
}
lm(percent ~ trtmnt.amnt , data = temp.df)
})
# change these
analysis <- all.obj.reg2$all.boolean
principle.components.used <- create.numlist(1:3)
# let these do the work
observations <- analysis$y.data
principle.comp.matrix <- analysis$linear.pca$rotation[,unlist(principle.components.used)]
fitted.in.pca <- lapply(names(principle.components.used), FUN = function(a){analysis$lpca.regressions[[a]]})
names(fitted.in.pca) <- principle.components.used
#### Predicted Data
####
fitted.in.pca.matrix <- sapply(fitted.in.pca, FUN = function(b){b$fitted.values})
fitted.percents <- principle.comp.matrix %*% t(fitted.in.pca.matrix)
# adding mutation columns!
fitted.percents <- mutate(as.data.frame(fitted.percents), mutation = all.reads$`By mutation(s)`)
# unstacking
fitted.percents.unstack <- pivot_longer(data = fitted.percents, cols = -mutation, names_to = "sample", values_to = "percent")
fitted.percents.unstack <- mutate(fitted.percents.unstack, obs.or.predict = "Prediction")
####  Observation Data
####
observations <- mutate(observations, mutation = all.reads$`By mutation(s)`)
observed.percents.unstack <- pivot_longer(data = observations, cols = -mutation, names_to = "sample", values_to = "percent")
observed.percents.unstack <- mutate(observed.percents.unstack, obs.or.predict = "Observation")
#### Row Binding
####
final.percents <- rbind(fitted.percents.unstack, observed.percents.unstack)
# adding experiment information
rownames(experiment.information) <- experiment.information$entire
final.percents <- cbind(final.percents, experiment.information[ final.percents$sample,])
final.percents
all.percent.sum <- apply(all.reads[,all.boolean], 1, sum)
mutation.subsample <- all.reads$`By mutation(s)`[order(all.percent.sum, decreasing = TRUE)][1:10]
subsample <- filter(final.percents, (trtmnt.type == "Ola" | trtmnt.type == "mock") & mutation %in% mutation.subsample & !percent < 0.1)
ggplot(data = subsample, aes(x = trtmnt.amnt, y = percent, color = mutation)) +
geom_point(data = subset(subsample, obs.or.predict == "Observation"), aes(x = trtmnt.amnt, y = percent, color = mutation, shape = obs.or.predict))  +
geom_line(data = subset(subsample, obs.or.predict == "Prediction"), aes(x = trtmnt.amnt, y = percent, color = mutation, shape = obs.or.predict))  +
theme(legend.position = "none")+
labs(title = "Principle Component Analysis on Olaparib Haploid Experiments", x = "Olaparib Concentration", y = "Allele Percentage")
all.percent.sum <- apply(all.reads[,all.hap], 1, sum)
mutation.subsample <- all.reads$`By mutation(s)`[order(all.percent.sum, decreasing = TRUE)][c(1,3, 4)]
subsample <- filter(final.percents, (trtmnt.type == "Ola" | trtmnt.type == "mock") & mutation %in% mutation.subsample & !percent < 1)
ggplot(data = subsample, aes(x = trtmnt.amnt, y = percent, color = mutation)) +
geom_point(data = subset(subsample, obs.or.predict == "Observation"), aes(x = trtmnt.amnt, y = percent, color = mutation))  +
geom_line(data = subset(subsample, obs.or.predict == "Prediction"), aes(x = trtmnt.amnt, y = percent, color = mutation, shape = obs.or.predict))  +
labs(title = "Regressing Three Mutations", x = "Olaparib Concentration", y = "Allele Percentage")
all.percent.sum <- apply(all.reads[,all.hap], 1, sum)
mutation.subsample <- all.reads$`By mutation(s)`[order(all.percent.sum, decreasing = TRUE)][1:10]
subsample <- filter(final.percents, trtmnt.type == "Nira" & mutation %in% mutation.subsample & !percent < 0.01)
ggplot(data = subsample, aes(x = trtmnt.amnt, y = percent, color = mutation)) +
geom_point(data = subset(subsample, obs.or.predict == "Observation"), aes(x = trtmnt.amnt, y = percent, color = mutation, shape = obs.or.predict))  +
geom_line(data = subset(subsample, obs.or.predict == "Prediction"), aes(x = trtmnt.amnt, y = percent, color = mutation, shape = obs.or.predict))  +
theme(legend.position = "none")
all.percent.sum <- apply(all.reads[,all.hap], 1, sum)
mutation.subsample <- all.reads$`By mutation(s)`[order(all.percent.sum, decreasing = TRUE)][1]
subsample <- filter(final.percents, trtmnt.type == "Nira" & mutation %in% mutation.subsample & !percent < 0.01)
ggplot(data = subsample, aes(x = trtmnt.amnt, y = percent, color = mutation)) +
geom_point(data = subset(subsample, obs.or.predict == "Observation"), aes(x = trtmnt.amnt, y = percent, color = mutation))  +
geom_line(data = subset(subsample, obs.or.predict == "Prediction"), aes(x = trtmnt.amnt, y = percent, color = mutation, shape = obs.or.predict))
all.percent.sum <- apply(all.reads[,all.dip], 1, sum)
mutation.subsample <- all.reads$`By mutation(s)`[order(all.percent.sum, decreasing = TRUE)][1:10]
subsample <- filter(final.percents, trtmnt.type == "Ola" & mutation %in% mutation.subsample & !percent < 0.01)
ggplot(data = subsample, aes(x = trtmnt.amnt, y = percent, color = mutation)) +
geom_point(data = subset(subsample, obs.or.predict == "Observation"), aes(x = trtmnt.amnt, y = percent, color = mutation, shape = obs.or.predict))  +
geom_line(data = subset(subsample, obs.or.predict == "Prediction"), aes(x = trtmnt.amnt, y = percent, color = mutation, shape = obs.or.predict))  +
theme(legend.position = "none")
top.mutations <- as.list(all.reads$`By mutation(s)`[1:50])
names(top.mutations) <- all.reads$`By mutation(s)`[1:50]
first.50.regressions <- lapply(top.mutations, function(x){
temp.df <- filter(final.percents, obs.or.predict == "Observation" , mutation == x)
if(x %in% all.reads$`By mutation(s)`[1:10]){
filter(temp.df, percent > 1)
}
lm(percent ~ Cell.Type + trtmnt.amnt + trtmnt.type, data = temp.df)
})
first.50.coef <- lapply(first.50.regressions, FUN = function(x){x$coefficients[3]})
plot(unlist(first.50.coef))
plot(all.obj.reg2$all.boolean$linear.pca$rotation[1:50, 3])
el.2nd.val <- all.obj.reg2$all.boolean$linear.pca$rotation[1:50,3] * all.obj.reg2$all.boolean$lpca.regressions$`3`$coefficients[5]
text.index <- rep(NULL, 50)
text.index[abs(el.2nd.val) > 0.1 ] <- all.reads$`By mutation(s)`[1:50] [abs(el.2nd.val) > 0.1]
plot(1:50, el.2nd.val, main = "First 50 Elements of The Second Principle Component", xlab = "Index", ylab = "Percent Change Coresp. to 1-Unit Increase in Dose")  + text(1:50, el.2nd.val, text.index, cex = 0.8, pos = 4)
# comparted to a regression
plot(1:50, el.2nd.val,  xlab = "Index", ylab = "Percent Change Coresp. to 1-Unit Increase in Dose", main = "PCA Slopes Versus Individually Fit Slopes")  + points(1:50, unlist(first.50.coef), col = "red")
plot(1:50, el.2nd.val, main = "Slope Term of Treatment Amount Assigned to Each Mutation", xlab = "Index", ylab = "Percent Change Coresp. to 1-Unit Increase in Dose")  + text(1:50, el.2nd.val, text.index, cex = 0.8, pos = 4)
plot(all.obj.reg2$all.hap$linear.pca$rotation[1:50,3])
plot(all.obj.reg2$all.hap$linear.pca$rotation[1:50,4])
hist(all.obj.lreg2$all.boolean$linear.pca$x[,1])
plot(all.obj.reg2$all.boolean$linear.pca$rotation[1:50, 3])
el.2nd.val <- all.obj.reg2$all.boolean$linear.pca$rotation[1:50,3] * all.obj.reg2$all.boolean$lpca.regressions$`3`$coefficients[5]
text.index <- rep(NULL, 50)
text.index[abs(el.2nd.val) > 0.1 ] <- all.reads$`By mutation(s)`[1:50] [abs(el.2nd.val) > 0.1]
plot(1:50, el.2nd.val, main = "First 50 Elements of The Second Principle Component", xlab = "Index", ylab = "Percent Change Coresp. to 1-Unit Increase in Dose")  + text(1:50, el.2nd.val, text.index, cex = 0.8, pos = 4)
# comparted to a regression
plot(1:50, el.2nd.val,  xlab = "Index", ylab = "Percent Change Coresp. to 1-Unit Increase in Dose", main = "PCA Slopes Versus Individually Fit Slopes")  + points(1:50, unlist(first.50.coef), col = "red")
plot(1:50, el.2nd.val, main = "Slope Term of Treatment Amount Assigned to Each Mutation", xlab = "Index", ylab = "Percent Change Coresp. to 1-Unit Increase in Dose")  + text(1:50, el.2nd.val, text.index, cex = 0.8, pos = 4)
plot(all.obj.reg2$all.hap$linear.pca$rotation[1:50,3])
plot(all.obj.reg2$all.hap$linear.pca$rotation[1:50,4])
hist(all.obj.reg2$all.boolean$linear.pca$x[,1])
hist(all.obj.lreg2$all.hap$linear.pca$x[,1])
plot(all.obj.reg2$all.boolean$linear.pca$rotation[1:50, 3])
el.2nd.val <- all.obj.reg2$all.boolean$linear.pca$rotation[1:50,3] * all.obj.reg2$all.boolean$lpca.regressions$`3`$coefficients[5]
text.index <- rep(NULL, 50)
text.index[abs(el.2nd.val) > 0.1 ] <- all.reads$`By mutation(s)`[1:50] [abs(el.2nd.val) > 0.1]
plot(1:50, el.2nd.val, main = "First 50 Elements of The Second Principle Component", xlab = "Index", ylab = "Percent Change Coresp. to 1-Unit Increase in Dose")  + text(1:50, el.2nd.val, text.index, cex = 0.8, pos = 4)
# comparted to a regression
plot(1:50, el.2nd.val,  xlab = "Index", ylab = "Percent Change Coresp. to 1-Unit Increase in Dose", main = "PCA Slopes Versus Individually Fit Slopes")  + points(1:50, unlist(first.50.coef), col = "red")
plot(1:50, el.2nd.val, main = "Slope Term of Treatment Amount Assigned to Each Mutation", xlab = "Index", ylab = "Percent Change Coresp. to 1-Unit Increase in Dose")  + text(1:50, el.2nd.val, text.index, cex = 0.8, pos = 4)
plot(all.obj.reg2$all.hap$linear.pca$rotation[1:50,3])
plot(all.obj.reg2$all.hap$linear.pca$rotation[1:50,4])
hist(all.obj.reg2$all.boolean$linear.pca$x[,1])
hist(all.obj.reg2$all.hap$linear.pca$x[,1])
hist(all.obj.reg2$all.hap$linear.pca$x[,2])
hist(all.obj.reg2$all.hap$linear.pca$x[,3])
plot(all.obj.reg2$lpca.regression$residuals)
# change these
analysis <- all.obj.reg2$all.dip
principle.components.used <- create.numlist(1:2)
# let these doe the work
observations <- analysis$y.data
principle.comp.matrix <- analysis$linear.pca$rotation[,unlist(principle.components.used)]
fitted.in.pca <- lapply(names(principle.components.used), FUN = function(a){analysis$lpca.regressions[[a]]})
names(fitted.in.pca) <- principle.components.used
#### Predicted Data
####
fitted.in.pca.matrix <- sapply(fitted.in.pca, FUN = function(b){b$fitted.values})
fitted.percents <- principle.comp.matrix %*% t(fitted.in.pca.matrix)
# adding mutation columns!
fitted.percents <- mutate(as.data.frame(fitted.percents), mutation = all.reads$`By mutation(s)`)
# unstacking
fitted.percents.unstack <- pivot_longer(data = fitted.percents, cols = -mutation, names_to = "sample", values_to = "percent")
fitted.percents.unstack <- mutate(fitted.percents.unstack, obs.or.predict = "Prediction")
####  Observation Data
####
observations <- mutate(observations, mutation = all.reads$`By mutation(s)`)
observed.percents.unstack <- pivot_longer(data = observations, cols = -mutation, names_to = "sample", values_to = "percent")
observed.percents.unstack <- mutate(observed.percents.unstack, obs.or.predict = "Observation")
#### Row Binding
####
final.percents <- rbind(fitted.percents.unstack, observed.percents.unstack)
# adding experiment information
rownames(experiment.information) <- experiment.information$entire
final.percents <- cbind(final.percents, experiment.information[ final.percents$sample,])
final.percents
all.percent.sum <- apply(all.reads[,all.dip], 1, sum)
mutation.subsample <- all.reads$`By mutation(s)`[order(all.percent.sum, decreasing = TRUE)][1:3]
subsample <- filter(final.percents, (trtmnt.type == "Ola" | trtmnt.type == "mock") & mutation %in% mutation.subsample & !percent < 0.5)
ggplot(data = subsample, aes(x = trtmnt.amnt, y = percent, color = mutation)) +
geom_point(data = subset(subsample, obs.or.predict == "Observation"), aes(x = trtmnt.amnt, y = percent, color = mutation))  +
geom_line(data = subset(subsample, obs.or.predict == "Prediction"), aes(x = trtmnt.amnt, y = percent, color = mutation))  +
#theme(legend.position = "none")+
labs(title = "Principle Component Analysis on Olaparib Diploid Experiments", x = "Olaparib Concentration", y = "Allele Percentage")
subsample <- filter(final.percents, (trtmnt.type == "Nira" | trtmnt.type == "mock") & mutation %in% mutation.subsample & !percent < 0.5)
ggplot(data = subsample, aes(x = trtmnt.amnt, y = percent, color = mutation)) +
geom_point(data = subset(subsample, obs.or.predict == "Observation"), aes(x = trtmnt.amnt, y = percent, color = mutation))  +
geom_line(data = subset(subsample, obs.or.predict == "Prediction"), aes(x = trtmnt.amnt, y = percent, color = mutation))  +
#theme(legend.position = "none")+
labs(title = "Principle Component Analysis on Niraparib Diploid Experiments", x = "Niraparib Concentration", y = "Allele Percentage")
subsample <- filter(final.percents, (trtmnt.type == "Gy" | trtmnt.type == "unt") & mutation %in% mutation.subsample & !percent < 0.5)
ggplot(data = subsample, aes(x = trtmnt.amnt, y = percent, color = mutation)) +
geom_point(data = subset(subsample, obs.or.predict == "Observation"), aes(x = trtmnt.amnt, y = percent, color = mutation))  +
geom_line(data = subset(subsample, obs.or.predict == "Prediction"), aes(x = trtmnt.amnt, y = percent, color = mutation))  +
#theme(legend.position = "none")+
labs(title = "Principle Component Analysis on Irradiated Diploid Experiments", x = "Radiation Amount", y = "Allele Percentage")
all.percent.sum <- apply(all.reads[,all.dip], 1, sum)
mutation.subsample <- all.reads$`By mutation(s)`[order(all.percent.sum, decreasing = TRUE)][5]
subsample <- filter(final.percents,  mutation %in% mutation.subsample & !percent < 0.5)
ggplot(data = subsample, aes(x = trtmnt.amnt, y = percent, color = mutation)) +
geom_point(data = subset(subsample, obs.or.predict == "Observation"), aes(x = trtmnt.amnt, y = percent, color = mutation))  +
geom_line(data = subset(subsample, obs.or.predict == "Prediction"), aes(x = trtmnt.amnt, y = percent, color = mutation))  +
#theme(legend.position = "none")+
labs(title = "PCA Failure in -5sT -3sC... Mutation", x = "Olaparib Concentration", y = "Allele Percentage")
subsample <- filter(final.percents, (trtmnt.type == "Nira" | trtmnt.type == "mock") & mutation %in% mutation.subsample & !percent < 0.5)
ggplot(data = subsample, aes(x = trtmnt.amnt, y = percent, color = mutation)) +
geom_point(data = subset(subsample, obs.or.predict == "Observation"), aes(x = trtmnt.amnt, y = percent, color = mutation))  +
geom_line(data = subset(subsample, obs.or.predict == "Prediction"), aes(x = trtmnt.amnt, y = percent, color = mutation))  +
#theme(legend.position = "none")+
labs(title = "Principle Component Analysis on Niraparib Diploid Experiments", x = "Niraparib Concentration", y = "Allele Percentage")
subsample <- filter(final.percents, (trtmnt.type == "Gy" | trtmnt.type == "unt") & mutation %in% mutation.subsample & !percent < 0.5)
ggplot(data = subsample, aes(x = trtmnt.amnt, y = percent, color = mutation)) +
geom_point(data = subset(subsample, obs.or.predict == "Observation"), aes(x = trtmnt.amnt, y = percent, color = mutation))  +
geom_line(data = subset(subsample, obs.or.predict == "Prediction"), aes(x = trtmnt.amnt, y = percent, color = mutation))  +
#theme(legend.position = "none")+
labs(title = "Principle Component Analysis on Irradiated Diploid Experiments", x = "Radiation Amount", y = "Allele Percentage")
subsample <- filter(final.percents,  mutation %in% mutation.subsample & !percent < 0.5)
ggplot(data = subsample, aes(x = trtmnt.amnt, y = percent, color = mutation)) +
geom_point(data = subset(subsample, obs.or.predict == "Observation"), aes(x = trtmnt.amnt, y = percent, color = mutation))  +
geom_line(data = subset(subsample, obs.or.predict == "Prediction"), aes(x = trtmnt.amnt, y = percent, color = mutation))  +
#theme(legend.position = "none")+
labs(title = "Principle Component Analysis on Irradiated Diploid Experiments", x = "Radiation Amount", y = "Allele Percentage") +
facet_wrap(~trtmnt.type)
library(readr)
library(tidyverse)
library(scatterplot3d)
library(kernlab)
source("data.load.and.clean.R")
head(all.reads[,3:9])
source('core.functions.R')
## Initialize object
first.obj <- begin.object(boolean.vector = all.boolean, nametag = "all.boolean", y.data = all.reads, x.set = experiment.information)
## Conduct Linear PCA
first.obj.pca <- conduct.linear.pca(list.object = first.obj)
## View screeplot of the Linear PCA
plot(first.obj.pca$linear.pca, xlab = "Principle Component Index", main = "Scree Plot of First Experiment Object")
## Conduct regression
first.obj.reg2 <- conduct.regression2(first.obj.pca)
## View Regression
summary(first.obj.reg2$lpca.regressions$`1`)
summary(first.obj.reg2$lpca.regressions$`2`)
first.obj.plot <- graphic.pipeline(first.obj.reg2, principle.components.used = 1:2)
first.obj.plot$prediction.plotting
experiment.information[all.boolean,]
analysis <- all.obj.reg2$all.boolean
graphics.pipeline2 <- function(analysis, number.of.pcs = 1:2){
B <- as.matrix(analysis$linear.pca$rotation[,number.of.pcs])
colnames(B) <- NULL
C <- analysis$linear.pca$rotation[number.of.pcs, ]
colnames(C) <- NULL
D <- matrix(0, nrow = ncol(B), ncol = C)
X <- model.matrix(y.set ~ ., analysis$lpca.regressions$`1`$model)
rownames(X) <- NULL
colnames(X) <- NULL
H <- X %*% solve(t(X) %*% X) %*% t(X)
hatA <- B %*% C %*% H
#mean( abs(hatA - as.matrix(analysis$y.data) ) )
hatA <- as.data.frame(hatA)
names(hatA) <- names(analysis$y.data)
# adding mutation columns!
fitted.percents <- mutate(hatA, mutation = all.reads$`By mutation(s)`)
# unstacking
fitted.percents.unstack <- pivot_longer(data = fitted.percents, cols = -mutation, names_to = "sample", values_to = "percent")
fitted.percents.unstack <- mutate(fitted.percents.unstack, obs.or.predict = "Prediction")
####  Observation Data
####
observations <- mutate(analysis$y.data, mutation = all.reads$`By mutation(s)`)
observed.percents.unstack <- pivot_longer(data = observations, cols = -mutation, names_to = "sample", values_to = "percent")
observed.percents.unstack <- mutate(observed.percents.unstack, obs.or.predict = "Observation")
#### Row Binding
####
final.percents <- rbind(fitted.percents.unstack, observed.percents.unstack)
# adding experiment information
rownames(experiment.information) <- experiment.information$entire
final.percents <- cbind(final.percents, experiment.information[ final.percents$sample,])
return(c(analysis, prediction.plotting = list(final.percents)))
}
ex <- graphics.pipeline2(analysis)
## Beginning all objects
all.obj <- lapply(boolean.name.list, FUN = function(x){begin.object(boolean.vector = boolean.list[[x]], nametag = x , y.data = all.reads, x.set = experiment.information)})
# Conducting linear pca on all subsets
all.obj.lpca <- lapply(all.obj, FUN = function(x){conduct.linear.pca(x)})
all.obj.reg2 <- lapply(all.obj.lpca, FUN = function(z){conduct.regression2(z, pcas = 1:4)})
ex <- graphics.pipeline2(analysis)
graphics.pipeline2 <- function(analysis, number.of.pcs = 1:2){
B <- as.matrix(analysis$linear.pca$rotation[,number.of.pcs])
colnames(B) <- NULL
C <- analysis$linear.pca$rotation[number.of.pcs, ]
colnames(C) <- NULL
D <- matrix(0, nrow = ncol(B), ncol = C)
X <- model.matrix(y.set ~ ., analysis$lpca.regressions$`1`$model)
rownames(X) <- NULL
colnames(X) <- NULL
H <- X %*% solve(t(X) %*% X) %*% t(X)
hatA <- B %*% C %*% H
#mean( abs(hatA - as.matrix(analysis$y.data) ) )
hatA <- as.data.frame(hatA)
names(hatA) <- names(analysis$y.data)
# adding mutation columns!
fitted.percents <- mutate(hatA, mutation = all.reads$`By mutation(s)`)
# unstacking
fitted.percents.unstack <- pivot_longer(data = fitted.percents, cols = -mutation, names_to = "sample", values_to = "percent")
fitted.percents.unstack <- mutate(fitted.percents.unstack, obs.or.predict = "Prediction")
####  Observation Data
####
observations <- mutate(analysis$y.data, mutation = all.reads$`By mutation(s)`)
observed.percents.unstack <- pivot_longer(data = observations, cols = -mutation, names_to = "sample", values_to = "percent")
observed.percents.unstack <- mutate(observed.percents.unstack, obs.or.predict = "Observation")
#### Row Binding
####
final.percents <- rbind(fitted.percents.unstack, observed.percents.unstack)
# adding experiment information
rownames(experiment.information) <- experiment.information$entire
final.percents <- cbind(final.percents, experiment.information[ final.percents$sample,])
return(c(analysis, prediction.plotting = list(final.percents)))
}
ex <- graphics.pipeline2(analysis)
analysis <- all.obj.reg2$all.boolean
number.of.pcs <- 1:2
B <- as.matrix(analysis$linear.pca$rotation[,number.of.pcs])
colnames(B) <- NULL
C <- analysis$linear.pca$rotation[number.of.pcs, ]
colnames(C) <- NULL
D <- matrix(0, nrow = ncol(B), ncol = C)
X <- model.matrix(y.set ~ ., analysis$lpca.regressions$`1`$model)
rownames(X) <- NULL
colnames(X) <- NULL
H <- X %*% solve(t(X) %*% X) %*% t(X)
hatA <- B %*% C %*% H
#mean( abs(hatA - as.matrix(analysis$y.data) ) )
hatA <- as.data.frame(hatA)
names(hatA) <- names(analysis$y.data)
# adding mutation columns!
fitted.percents <- mutate(hatA, mutation = all.reads$`By mutation(s)`)
# unstacking
fitted.percents.unstack <- pivot_longer(data = fitted.percents, cols = -mutation, names_to = "sample", values_to = "percent")
fitted.percents.unstack <- mutate(fitted.percents.unstack, obs.or.predict = "Prediction")
####  Observation Data
####
observations <- mutate(analysis$y.data, mutation = all.reads$`By mutation(s)`)
observed.percents.unstack <- pivot_longer(data = observations, cols = -mutation, names_to = "sample", values_to = "percent")
observed.percents.unstack <- mutate(observed.percents.unstack, obs.or.predict = "Observation")
#### Row Binding
####
final.percents <- rbind(fitted.percents.unstack, observed.percents.unstack)
# adding experiment information
rownames(experiment.information) <- experiment.information$entire
final.percents <- cbind(final.percents, experiment.information[ final.percents$sample,])
final.percents
graphics.pipeline2 <- function(analysis, number.of.pcs = 1:2){
B <- as.matrix(analysis$linear.pca$rotation[,number.of.pcs])
colnames(B) <- NULL
C <- analysis$linear.pca$rotation[number.of.pcs, ]
colnames(C) <- NULL
D <- matrix(0, nrow = ncol(B), ncol = C)
X <- model.matrix(y.set ~ ., analysis$lpca.regressions$`1`$model)
rownames(X) <- NULL
colnames(X) <- NULL
H <- X %*% solve(t(X) %*% X) %*% t(X)
hatA <- B %*% C %*% H
#mean( abs(hatA - as.matrix(analysis$y.data) ) )
hatA <- as.data.frame(hatA)
names(hatA) <- names(analysis$y.data)
# adding mutation columns!
fitted.percents <- mutate(hatA, mutation = all.reads$`By mutation(s)`)
# unstacking
fitted.percents.unstack <- pivot_longer(data = fitted.percents, cols = -mutation, names_to = "sample", values_to = "percent")
fitted.percents.unstack <- mutate(fitted.percents.unstack, obs.or.predict = "Prediction")
####  Observation Data
####
observations <- mutate(analysis$y.data, mutation = all.reads$`By mutation(s)`)
observed.percents.unstack <- pivot_longer(data = observations, cols = -mutation, names_to = "sample", values_to = "percent")
observed.percents.unstack <- mutate(observed.percents.unstack, obs.or.predict = "Observation")
#### Row Binding
####
final.percents <- rbind(fitted.percents.unstack, observed.percents.unstack)
# adding experiment information
rownames(experiment.information) <- experiment.information$entire
final.percents <- cbind(final.percents, experiment.information[ final.percents$sample,])
return(c(analysis, prediction.plotting = list(final.percents)))
}
ex <- graphics.pipeline2(analysis)
ex$prediction.plotting
ex <- graphic.pipeline(analysis)
ex <- graphic.pipeline(analysis, principle.components.used = 1:2)
ex$prediction.plotting
ex2 <- graphics.pipeline2(analysis)
ex2$prediction.plotting
